<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My Blog</title>
    <link>http://yanzewei.github.io/post/</link>
    <description>Recent content in Posts on My Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Dec 2016 00:14:13 +0800</lastBuildDate>
    <atom:link href="http://yanzewei.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>js module</title>
      <link>http://yanzewei.github.io/post/js-module/</link>
      <pubDate>Wed, 14 Dec 2016 00:14:13 +0800</pubDate>
      
      <guid>http://yanzewei.github.io/post/js-module/</guid>
      <description>

&lt;h1 id=&#34;js-模块化的学习:af61ba8fc61d4003aefe600be3b01d50&#34;&gt;js 模块化的学习&lt;/h1&gt;

&lt;h2 id=&#34;es6与commonjs模块加载的区别:af61ba8fc61d4003aefe600be3b01d50&#34;&gt;es6与commonJs模块加载的区别&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;es6为ECMAScript2016标准,commonJs为此前为解决模块化的模块加载器.&lt;/p&gt;

&lt;p&gt;es6的模块输出为引用 , commonJs的模块输出为值.&lt;/p&gt;

&lt;p&gt;循环加载下,commonJs是加载时执行,而es6只是生成被加载模块的引用.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;amd-与-cmd:af61ba8fc61d4003aefe600be3b01d50&#34;&gt;amd 与 cmd&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;amd:异步模块规范, cmd:通用模块规范&lt;/p&gt;

&lt;p&gt;amd 是requireJs 产出的,cmd 的是seaJs产出的&lt;/p&gt;

&lt;p&gt;amd 提倡预先执行, cmd 提倡懒执行&lt;/p&gt;

&lt;p&gt;seaJs注重代码调试&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;模块加载器出现前的问题:af61ba8fc61d4003aefe600be3b01d50&#34;&gt;模块加载器出现前的问题&lt;/h2&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一次加载多个js文件, 加载的时候, 浏览器会停止对网页的渲染.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;js文件间存在依赖关系, 必须把依赖最大的放在最后.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>learning skill</title>
      <link>http://yanzewei.github.io/post/learning-skill/</link>
      <pubDate>Mon, 31 Oct 2016 16:46:59 +0800</pubDate>
      
      <guid>http://yanzewei.github.io/post/learning-skill/</guid>
      <description>

&lt;h1 id=&#34;自律:dc335c222f5658c5a2003eecee50bc20&#34;&gt;自律&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;心理暗示.写在手上,或床头,或桌上.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;规律作息,最迟9点要出门吃早餐.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;合理运动,每周至少两次去健身房,但不能影响到学习睡眠.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;屏蔽干扰,关掉手机wifi.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;学理论时:dc335c222f5658c5a2003eecee50bc20&#34;&gt;学理论时&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;带着解决问题的心思去收集材料, 不限一本书, 不限一个作者.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;读资料, 或解题时, 有时可以想象出一个图, 研究它&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;相关的概念, 术语与释义熟记&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;假设, 变量与条件&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;心态:dc335c222f5658c5a2003eecee50bc20&#34;&gt;心态&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;学习效果不能立刻让大脑感受到奖励, 但会有那么一刻, 如果想放弃, 就回想过去的某些时刻. 获得了成功后, 我简直觉得自己就是天才, 今后什么困难我都没问题, 继续下去心情也是愉悦的.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;逆境中获得的胜利能有持久的快感.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;同时也起回想下, 在过去某一时刻坚持了那么久, 当中出现了失败, 靠的是什么在支撑. 因为在我的努力下, 我在窃喜某个小方面, 我又掌握熟悉了, 甚至绝对做得到满分.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;人还是得自己靠得住.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>go America</title>
      <link>http://yanzewei.github.io/post/go-America/</link>
      <pubDate>Mon, 31 Oct 2016 14:41:10 +0800</pubDate>
      
      <guid>http://yanzewei.github.io/post/go-America/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;进国内名企&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;刷题&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;报几万块的培训班&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;浏览国外招聘&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;就目前的状况,考虑前两项.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>google search trick</title>
      <link>http://yanzewei.github.io/post/google-search-trick/</link>
      <pubDate>Mon, 31 Oct 2016 14:21:28 +0800</pubDate>
      
      <guid>http://yanzewei.github.io/post/google-search-trick/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&amp;rdquo;&amp;ldquo;表示全匹配&lt;/li&gt;
&lt;li&gt;- 表示去除掉 例：搜索 - 引擎&lt;/li&gt;
&lt;li&gt;* 通配符 例：搜索*&lt;/li&gt;
&lt;li&gt;inurl:yanzw&lt;/li&gt;
&lt;li&gt;intitle:肉身翻墙&lt;/li&gt;
&lt;li&gt;filetype:pdf&lt;/li&gt;
&lt;li&gt;site:yanzw.net&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>php sort</title>
      <link>http://yanzewei.github.io/post/php-sort/</link>
      <pubDate>Fri, 28 Oct 2016 12:04:58 +0800</pubDate>
      
      <guid>http://yanzewei.github.io/post/php-sort/</guid>
      <description>

&lt;h2 id=&#34;php的快排代码:5b1f4b8fb2b5b71dd1bffd8957c58ac6&#34;&gt;php的快排代码&lt;/h2&gt;

&lt;h3 id=&#34;快排思想:5b1f4b8fb2b5b71dd1bffd8957c58ac6&#34;&gt;快排思想&lt;/h3&gt;

&lt;h4 id=&#34;从数组里取随机取一个数-左边的数都小于它-右边的数都大于它-然后左右两部分别递归这个过程:5b1f4b8fb2b5b71dd1bffd8957c58ac6&#34;&gt;从数组里取随机取一个数,左边的数都小于它,右边的数都大于它.然后左右两部分别递归这个过程.&lt;/h4&gt;

&lt;h3 id=&#34;测试用例:5b1f4b8fb2b5b71dd1bffd8957c58ac6&#34;&gt;测试用例&lt;/h3&gt;

&lt;h3 id=&#34;时间和空间复杂度:5b1f4b8fb2b5b71dd1bffd8957c58ac6&#34;&gt;时间和空间复杂度&lt;/h3&gt;

&lt;h3 id=&#34;举一反三:5b1f4b8fb2b5b71dd1bffd8957c58ac6&#34;&gt;举一反三&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>背包动规问题</title>
      <link>http://yanzewei.github.io/post/backpack/</link>
      <pubDate>Sat, 14 Nov 2015 00:42:47 +0800</pubDate>
      
      <guid>http://yanzewei.github.io/post/backpack/</guid>
      <description>

&lt;h2 id=&#34;解答来自http-www-lintcode-com-zh-cn-problem-backpack:de4de28282dc3dd85e1a82e3b6f91514&#34;&gt;解答来自&lt;a href=&#34;http://www.lintcode.com/zh-cn/problem/backpack/&#34;&gt;http://www.lintcode.com/zh-cn/problem/backpack/&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;的题目.在n个物品中挑选若干物品装入背包，最多能装多满？假设背包的大小为m，每个物品的大小为A[i]&lt;/p&gt;

&lt;h3 id=&#34;样例:de4de28282dc3dd85e1a82e3b6f91514&#34;&gt;样例&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;如果有4个物品[2, 3, 5, 7]&lt;/p&gt;

&lt;p&gt;如果背包的大小为11，可以选择[2, 3, 5]装入背包，最多可以装满10的空间。&lt;/p&gt;

&lt;p&gt;如果背包的大小为12，可以选择[2, 3, 7]装入背包，最多可以装满12的空间。&lt;/p&gt;

&lt;p&gt;函数需要返回最多能装满的空间大小。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;注意:de4de28282dc3dd85e1a82e3b6f91514&#34;&gt;注意&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;你不可以将物品进行切割。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;c语言实现代码：&lt;/p&gt;

&lt;h3 id=&#34;我的思路:de4de28282dc3dd85e1a82e3b6f91514&#34;&gt;我的思路&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;取n个物品的最优值S[n]，那先想想取前n-1件物品的最优值，设为S[n-1]，如果S[n-1]+A[n]&amp;gt;m，那么S[n]=S[n-1],不然S[n]=S[n-1]+A[n];&lt;/p&gt;

&lt;p&gt;取0个物品的最优值S[0],应该为0，以它为初始值；&lt;/p&gt;

&lt;p&gt;递归的去遍历这个过程，取j=0,j++到m,记S[i][j],表示取前i件物品填充j大小的空间的最优值。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;c语言实现代码:de4de28282dc3dd85e1a82e3b6f91514&#34;&gt;C语言实现代码&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;#include &amp;lt; stdio.h &amp;gt;&lt;/p&gt;

&lt;p&gt;#include &amp;lt; stdlib.h &amp;gt;&lt;/p&gt;

&lt;p&gt;int main()&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   int i,j,n,m,*A,**S;

   printf(&amp;quot;input backage weight:\n&amp;quot;);

   scanf(&amp;quot;%d&amp;quot;,&amp;amp;m);

   printf(&amp;quot;input items number:\n&amp;quot;);

   scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);

   printf(&amp;quot;input each item weight:\n&amp;quot;);

   A = (int *)malloc(n*sizeof(int)); 

   S = (int **)malloc((n+1)*sizeof(int * )); 

   S[0] = (int *)malloc(m*sizeof(int));

   for(i=1;i&amp;lt;=n;i++)

   {   

           scanf(&amp;quot;%d&amp;quot;,&amp;amp;A[i-1]);

           S[i] = (int *)malloc(m*sizeof(int));

   }   

   for(j=0;j&amp;lt;=m;j++)

   {   

           S[0][j] = 0;

   }   

   for(i=1;i&amp;lt;=n;i++)

   {   

      for(j=0;j&amp;lt;=m;j++)

           {   

                   S[i][j] = S[i-1][j];

                   if(j&amp;gt;=A[i-1])

                   {   

                           if(S[i][j-A[i-1]] + A[i-1] &amp;gt; S[i][j])

                           {   

                                   S[i][j] = S[i][j-A[i-1]] + A[i-1];

                           }   

                   } 

  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;printf(&amp;ldquo;max weight:%d\n&amp;rdquo;,S[n][m]);&lt;/p&gt;

&lt;p&gt;free(A);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  free(S);

   return 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>linux管理命令札记</title>
      <link>http://yanzewei.github.io/post/network-command/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://yanzewei.github.io/post/network-command/</guid>
      <description>

&lt;h2 id=&#34;netstat查看端口是否被占用:d4a925e2a9bec01f30bb498499c4c818&#34;&gt;netstat查看端口是否被占用&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;例:nestat -anp | grep &amp;lsquo;8088&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;dig与ping:d4a925e2a9bec01f30bb498499c4c818&#34;&gt;dig与ping&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;dig全称是dns information groper.可以查看域名对应的dns节点,如dig www.baidu.com.ping只能返回最近的一个节点.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>初学git的几点疑问</title>
      <link>http://yanzewei.github.io/post/git-usage/</link>
      <pubDate>Sun, 01 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://yanzewei.github.io/post/git-usage/</guid>
      <description>

&lt;h2 id=&#34;工作区-与-暂存区的区别-以及-git-commit-与-git-push的区别:4b413fdebfe42d43590394b35a48620b&#34;&gt;工作区 与 暂存区的区别 以及 git commit 与 git push的区别&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;工作区就是你电脑能看到的。&lt;/p&gt;

&lt;p&gt;工作区里有个.git的隐藏目录。它就是所谓的版本库。几乎所有的git存储和操作的内容都位于其下。如果想备份库，注意要将其拷贝到其它地方。它里面就包含了stage(或叫index) files的暂存区。git会为我们创建第一个分支,叫master，以及有个指向master的指针Head&lt;/p&gt;

&lt;p&gt;要强调一点。
&lt;strong&gt;&lt;em&gt;git保存的不是文件差异或变化量&lt;/em&gt;&lt;/strong&gt;
，而是
&lt;strong&gt;&lt;em&gt;一系列快照&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;git add 的时候会把文件修改提交到暂存区。&lt;/p&gt;

&lt;p&gt;git commit 的时候才把其提交到master.这个只是保存到了本地的版本库&lt;/p&gt;

&lt;p&gt;git push 的时候会把修改提交到远程版本库。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;git-rm-与-rm的区别:4b413fdebfe42d43590394b35a48620b&#34;&gt;git rm 与 rm的区别&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;rm是物理删除掉工作区的文件。之后要执行git commit -am &amp;ldquo;msg&amp;rdquo;,其中a参数表示all,提交所有删除和修改的文件,但新增的不算.&lt;/p&gt;

&lt;p&gt;执行完上面的操作就相当于执行了git rm.&lt;/p&gt;

&lt;p&gt;那万一把工作区文件删错了,想恢复咋办.先执行git status,它会提示你Changes not staged for commit里deleted的文件有哪些,例如test.txt.然后你可以通过执行git checkout &amp;ndash;test.txt,删掉如果是文件夹也可以有这个命令恢复.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;在自己库再引入其它的库-怎么办:4b413fdebfe42d43590394b35a48620b&#34;&gt;在自己库再引入其它的库,怎么办&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;git clone 是不行的,提交时会报错.应该用git submodule add命令.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;如何解决冲突:4b413fdebfe42d43590394b35a48620b&#34;&gt;如何解决冲突&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;修改前没先git pull,导致了push时出现冲突.这时只要人工合并下冲突,再commit,再push就行.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>